--- symbolator-1.0.2/symbolator.py	(original)
+++ symbolator-1.0.2/symbolator.py	(refactored)
@@ -2,7 +2,7 @@
 # -*- coding: utf-8 -*-
 # Copyright © 2017 Kevin Thibedeau
 # Distributed under the terms of the MIT license
-from __future__ import print_function
+
 
 import sys, copy, re, argparse, os, errno
 
@@ -440,7 +440,7 @@
   '''Convert array ranges to Verilog style'''
   for p in vo.ports:
     # Replace VHDL downto and to
-    data_type = p.data_type.replace(' downto ', ':').replace(' to ', u'\u2799')
+    data_type = p.data_type.replace(' downto ', ':').replace(' to ', '\u2799')
     # Convert to Verilog style array syntax
     data_type = re.sub(r'([^(]+)\((.*)\)$', r'\1[\2]', data_type)
 
@@ -543,7 +543,7 @@
     (0,0), 'auto', None)
 
   # Render every component from every file into an image
-  for source, components in all_components.iteritems():
+  for source, components in all_components.items():
     for comp, extractor in components:
       reformat_array_params(comp)
       if source == '<stdin>':
--- symbolator-1.0.2/nucanvas/__init__.py	(original)
+++ symbolator-1.0.2/nucanvas/__init__.py	(refactored)
@@ -1 +1 @@
-from nucanvas import *
+from .nucanvas import *
--- symbolator-1.0.2/nucanvas/cairo_backend.py	(original)
+++ symbolator-1.0.2/nucanvas/cairo_backend.py	(refactored)
@@ -1,13 +1,13 @@
 # -*- coding: utf-8 -*-
 # Copyright © 2017 Kevin Thibedeau
 # Distributed under the terms of the MIT license
-from __future__ import print_function
+
 
 import os
 import math
 
 import cairo
-from shapes import *
+from .shapes import *
 
 try:
   import pango
--- symbolator-1.0.2/nucanvas/nucanvas.py	(original)
+++ symbolator-1.0.2/nucanvas/nucanvas.py	(refactored)
@@ -1,9 +1,9 @@
 # -*- coding: utf-8 -*-
 # Copyright © 2017 Kevin Thibedeau
 # Distributed under the terms of the MIT license
-from __future__ import print_function
 
-from shapes import GroupShape, DrawStyle
+
+from .shapes import GroupShape, DrawStyle
 
 
 class NuCanvas(GroupShape):
@@ -83,9 +83,9 @@
 
 if __name__ == '__main__':
 
-  from svg_backend import SvgSurface
-  from cairo_backend import CairoSurface
-  from shapes import PathShape
+  from .svg_backend import SvgSurface
+  from .cairo_backend import CairoSurface
+  from .shapes import PathShape
 
   #surf = CairoSurface('nc.png', DrawStyle(), padding=5, scale=2)
   surf = SvgSurface('nc.svg', DrawStyle(), padding=5, scale=2)
--- symbolator-1.0.2/nucanvas/shapes.py	(original)
+++ symbolator-1.0.2/nucanvas/shapes.py	(refactored)
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 # Copyright © 2017 Kevin Thibedeau
 # Distributed under the terms of the MIT license
-from __future__ import print_function
+
 
 import os
 import math
--- symbolator-1.0.2/nucanvas/svg_backend.py	(original)
+++ symbolator-1.0.2/nucanvas/svg_backend.py	(refactored)
@@ -1,16 +1,16 @@
 # -*- coding: utf-8 -*-
 # Copyright © 2017 Kevin Thibedeau
 # Distributed under the terms of the MIT license
-from __future__ import print_function
+
 
 import io
 import os
 import math
-import StringIO
+import io
 import xml.etree.ElementTree as ET
 
-from shapes import *
-from cairo_backend import CairoSurface
+from .shapes import *
+from .cairo_backend import CairoSurface
 
 #################################
 ## SVG objects
@@ -54,7 +54,7 @@
     
     self.fh = None
     
-  svg_header = u'''<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+  svg_header = '''<?xml version="1.0" encoding="UTF-8" standalone="no"?>
 <!-- Created by Symbolator http://kevinpt.github.io/symbolator -->
 <svg xmlns="http://www.w3.org/2000/svg"
 xmlns:xlink="http://www.w3.org/1999/xlink"
@@ -89,7 +89,7 @@
     # Reposition all shapes in the viewport
 #    for s in canvas.shapes:
 #      s.move(-x0 + self.padding, -y0 + self.padding)
-    vbox = u' '.join(str(s) for s in (x0-self.padding,y0-self.padding, W,H))
+    vbox = ' '.join(str(s) for s in (x0-self.padding,y0-self.padding, W,H))
 
     # Generate CSS for fonts
     text_color = rgb_to_hex(self.def_styles.text_color)
@@ -119,7 +119,7 @@
     #print('## FSET:', fv.font_set)
 
     font_css = []
-    for fs, fid in fv.font_set.iteritems():
+    for fs, fid in fv.font_set.items():
       family, size, weight = fs[0]
       text_color = rgb_to_hex(fs[1])
 
@@ -178,15 +178,15 @@
         'markerUnits': 'strokeWidth' if units == 'stroke' else 'userSpaceOnUse'
       }
 
-      attributes = ' '.join(['{}="{}"'.format(k,v) for k,v in attrs.iteritems()])
-
-      buf = StringIO.StringIO()
+      attributes = ' '.join(['{}="{}"'.format(k,v) for k,v in attrs.items()])
+
+      buf = io.StringIO()
       self.draw_shape(m_shape, buf)
       # Shift enerything inside a group so that the viewBox origin is 0,0
       svg_shapes = '<g transform="translate({},{})">{}</g>\n'.format(-mx0, -my0, buf.getvalue())
       buf.close()
 
-      markers.append(u'<marker {}>\n{}</marker>'.format(attributes, svg_shapes))
+      markers.append('<marker {}>\n{}</marker>'.format(attributes, svg_shapes))
 
     markers = '\n'.join(markers)
 
@@ -203,10 +203,10 @@
       fh.write(SvgSurface.svg_header.format(int(W*self.scale),int(H*self.scale),
               vbox, font_styles, markers))
       if not transparent:
-        fh.write(u'<rect x="{}" y="{}" width="100%" height="100%" fill="white"/>'.format(x0-self.padding,y0-self.padding))
+        fh.write('<rect x="{}" y="{}" width="100%" height="100%" fill="white"/>'.format(x0-self.padding,y0-self.padding))
       for s in canvas.shapes:
         self.draw_shape(s)
-      fh.write(u'</svg>')
+      fh.write('</svg>')
 
 
   def text_bbox(self, text, font_params, spacing=0):
@@ -245,11 +245,11 @@
     if text_color != (0,0,0):
       attrs['style'] = 'fill:{}'.format(rgb_to_hex(text_color))
 
-    attributes = ' '.join(['{}="{}"'.format(k,v) for k,v in attrs.iteritems()])
+    attributes = ' '.join(['{}="{}"'.format(k,v) for k,v in attrs.items()])
 
     text = SvgSurface.convert_pango_markup(text)
 
-    fh.write(u'<text class="{}" x="{}" y="{}" {}>{}</text>\n'.format(css_class, x, y, attributes, text))
+    fh.write('<text class="{}" x="{}" y="{}" {}>{}</text>\n'.format(css_class, x, y, attributes, text))
 
 
   def draw_shape(self, shape, fh=None):
@@ -294,19 +294,19 @@
     
     # Draw standard shapes
     elif isinstance(shape, GroupShape):
-      tform = [u'translate({},{})'.format(*shape._pos)]
+      tform = ['translate({},{})'.format(*shape._pos)]
       
       if 'scale' in shape.options:
-        tform.append(u'scale({})'.format(shape.options['scale']))
+        tform.append('scale({})'.format(shape.options['scale']))
       if 'angle' in shape.options:
-        tform.append(u'rotate({})'.format(shape.options['angle']))
-
-      fh.write(u'<g transform="{}">\n'.format(u' '.join(tform)))
+        tform.append('rotate({})'.format(shape.options['angle']))
+
+      fh.write('<g transform="{}">\n'.format(' '.join(tform)))
       
       for s in shape.shapes:
         self.draw_shape(s)
       
-      fh.write(u'</g>\n')
+      fh.write('</g>\n')
 
     elif isinstance(shape, TextShape):
       x0, y0, x1, y1 = shape.points
@@ -375,22 +375,22 @@
 
       # Add markers
       if marker_start in self.markers:
-        attrs['marker-start'] = u'url(#{})'.format(marker_start)
+        attrs['marker-start'] = 'url(#{})'.format(marker_start)
       if marker_end in self.markers:
-        attrs['marker-end'] = u'url(#{})'.format(marker_end)
+        attrs['marker-end'] = 'url(#{})'.format(marker_end)
       # FIXME: marker_seg
 
-      attributes = ' '.join(['{}="{}"'.format(k,v) for k,v in attrs.iteritems()])
-
-      fh.write(u'<line x1="{}" y1="{}" x2="{}" y2="{}" {}/>\n'.format(x0,y0, x1,y1, attributes))
+      attributes = ' '.join(['{}="{}"'.format(k,v) for k,v in attrs.items()])
+
+      fh.write('<line x1="{}" y1="{}" x2="{}" y2="{}" {}/>\n'.format(x0,y0, x1,y1, attributes))
 
 
     elif isinstance(shape, RectShape):
       x0, y0, x1, y1 = shape.points
       
-      attributes = ' '.join(['{}="{}"'.format(k,v) for k,v in attrs.iteritems()])
-
-      fh.write(u'<rect x="{}" y="{}" width="{}" height="{}" {}/>\n'.format(
+      attributes = ' '.join(['{}="{}"'.format(k,v) for k,v in attrs.items()])
+
+      fh.write('<rect x="{}" y="{}" width="{}" height="{}" {}/>\n'.format(
         x0,y0, x1-x0, y1-y0, attributes))
 
     elif isinstance(shape, OvalShape):
@@ -401,8 +401,8 @@
       h = abs(y1 - y0)
       rad = min(w,h)
       
-      attributes = ' '.join(['{}="{}"'.format(k,v) for k,v in attrs.iteritems()])
-      fh.write(u'<ellipse cx="{}" cy="{}" rx="{}" ry="{}" {}/>\n'.format(xc, yc,
+      attributes = ' '.join(['{}="{}"'.format(k,v) for k,v in attrs.items()])
+      fh.write('<ellipse cx="{}" cy="{}" rx="{}" ry="{}" {}/>\n'.format(xc, yc,
               w/2.0, h/2.0, attributes))
 
 
@@ -435,13 +435,13 @@
       lflag = 0 if abs(extent) <= 180 else 1
       sflag = 0 if extent >= 0 else 1
 
-      attributes = ' '.join(['{}="{}"'.format(k,v) for k,v in attrs.iteritems()])
+      attributes = ' '.join(['{}="{}"'.format(k,v) for k,v in attrs.items()])
       
 #      fh.write(u'<circle cx="{}" cy="{}" r="6" fill="{}" />\n'.format(xc, yc, rgb_to_hex((255,0,255))))
 #      fh.write(u'<circle cx="{}" cy="{}" r="6" fill="{}" />\n'.format(xs, ys, rgb_to_hex((0,0,255))))
 #      fh.write(u'<circle cx="{}" cy="{}" r="6" fill="{}" />\n'.format(xe, ye, rgb_to_hex((0,255,255))))
 
-      fh.write(u'<path d="M{},{} A{},{} 0, {},{} {},{} {}" {}/>\n'.format(xs,ys, xr,yr, lflag, sflag, xe,ye, closed, attributes))
+      fh.write('<path d="M{},{} A{},{} 0, {},{} {},{} {}" {}/>\n'.format(xs,ys, xr,yr, lflag, sflag, xe,ye, closed, attributes))
 
     elif isinstance(shape, PathShape):
       pp = shape.nodes[0]
@@ -496,6 +496,6 @@
           
           #print('# pp:', pp)
 
-      attributes = ' '.join(['{}="{}"'.format(k,v) for k,v in attrs.iteritems()])
-      fh.write(u'<path d="{}" {}/>\n'.format(' '.join(nl), attributes))
-
+      attributes = ' '.join(['{}="{}"'.format(k,v) for k,v in attrs.items()])
+      fh.write('<path d="{}" {}/>\n'.format(' '.join(nl), attributes))
+
--- symbolator-1.0.2/symbolator_sphinx/__init__.py	(original)
+++ symbolator-1.0.2/symbolator_sphinx/__init__.py	(refactored)
@@ -1 +1 @@
-from symbolator_sphinx import *
+from .symbolator_sphinx import *
